import tkinter as tk
from tkinter import filedialog, messagebox, Menu, simpledialog
import requests, os, json, base64, threading
from cryptography.fernet import Fernet

debug_fernet = False

GITHUB_TOKEN = 
REPO_OWNER = 'bigb-me'
REPO_NAME = 'chat_messagesv1'
FILE_PATH = 'messages.txt'
USER_NAME = "E"

POLL_INTERVAL = 1000  # Polling interval in milliseconds
STAR_MARKER = "{added_star_message}"

ENCRYPTION_KEY = b'nKMWRA3ccBrD2EQgZYKIO7QKgObSooi2aFKIA5b1dik='
cipher = Fernet(ENCRYPTION_KEY)

if debug_fernet == True:
    print(ENCRYPTION_KEY)

def encrypt_content(content: str) -> str:
    """Encrypts content using Fernet encryption."""
    if debug_fernet:
        print("Encrypting content...")
    encrypted = cipher.encrypt(content.encode('utf-8'))
    encrypted_base64 = base64.urlsafe_b64encode(encrypted).decode('utf-8')
    if debug_fernet:
        print("Encrypted content (base64):", encrypted_base64)
    return encrypted_base64

def decrypt_content(encrypted_content: str) -> str:
    """Decrypts base64-encoded encrypted content using Fernet encryption."""
    if debug_fernet:
        print("Decrypting content...")
    try:
        encrypted_bytes = base64.urlsafe_b64decode(encrypted_content.encode('utf-8'))
        decrypted = cipher.decrypt(encrypted_bytes)
        decrypted_content = decrypted.decode('utf-8')
        if debug_fernet:
            print("Decrypted content:", decrypted_content)
        return decrypted_content
    except Exception as e:
        print("Decryption failed with error:", e)
        return ""

def get_existing_content():
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        content = response.json()
        encrypted_content = base64.b64decode(content['content']).decode('utf-8')
        if debug_fernet:
            print("Fetched encrypted content from GitHub:", encrypted_content)
        decrypted_content = decrypt_content(encrypted_content)
        return decrypted_content, content['sha']
    elif response.status_code == 404:
        print("File does not exist on GitHub.")
        return '', ''  # File doesn't exist, initialize with empty content
    else:
        print("Error fetching file:", response.status_code)
        print(response.json())
        return '', ''

def update_github_file(content, sha):
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    encrypted_content = encrypt_content(content)
    data = {
        'message': 'Update messages',
        'content': base64.b64encode(encrypted_content.encode('utf-8')).decode('utf-8'),
        'sha': sha
    }
    response = requests.put(url, headers=headers, data=json.dumps(data))
    return response.status_code == 200

def threaded_action(action, on_complete=None):
    """Runs an action in a separate thread and calls on_complete after."""
    def wrapper():
        action()
        if on_complete:
            root.after(0, on_complete)

    thread = threading.Thread(target=wrapper, daemon=True)
    thread.start()

def initialize_and_test():
    content, sha = get_existing_content()
    if not content:
        if debug_fernet:
            print("Initializing file with sample content.")
        sample_message = "System: This chat is empty, send a message! (feel free to delete this)"
        update_github_file(sample_message, sha)
    else:
        if debug_fernet:
            print("Current chat data (unencrypted):", content)
        else:
            pass

initialize_and_test()

def store_message(message, sender):
    existing_content, sha = get_existing_content()

    if not existing_content and sha == '':
        return False

    new_content = f"{existing_content}\n{sender}: {message}"
    success = update_github_file(new_content, sha)

    return success

def upload_file():
    def threaded_upload():
        disable_input("Uploading...")
        file_path = filedialog.askopenfilename()
        if file_path:
            file_name = os.path.basename(file_path)
            with open(file_path, "rb") as f:
                file_content = f.read()

            github_file_path = f"uploads/{file_name}"
            url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{github_file_path}"
            headers = {'Authorization': f'token {GITHUB_TOKEN}'}
            data = {
                'message': f"{USER_NAME} uploaded: {file_name}",
                'content': base64.b64encode(file_content).decode('utf-8')
            }
            response = requests.put(url, headers=headers, data=json.dumps(data))

            if response.status_code == 201:
                if store_message(f"{USER_NAME} uploaded: {file_name}", USER_NAME):
                    root.after(0, display_chat_history)
                else:
                    root.after(0, lambda: messagebox.showerror("Error", "Failed to store message."))
            else:
                root.after(0, lambda: messagebox.showerror("Error", "Failed to upload file to GitHub."))
        enable_input()

    thread = threading.Thread(target=threaded_upload, daemon=True)
    thread.start()

def toggle_star(line_text):
    def action():
        content, sha = get_existing_content()
        lines = content.splitlines()
        updated_lines = []
        for line in lines:
            if line == line_text:
                if line.endswith(STAR_MARKER):
                    line = line.replace(STAR_MARKER, '')  # Unstar
                else:
                    line += STAR_MARKER  # Star
            updated_lines.append(line)
        new_content = "\n".join(updated_lines)
        update_github_file(new_content, sha)

    threaded_action(action, display_chat_history)

def edit_message(line_text):
    original_sender, message_with_marker = line_text.split(":", 1)
    original_message = message_with_marker.replace(STAR_MARKER, "").strip()
    star_status = STAR_MARKER if STAR_MARKER in message_with_marker else ""

    new_message = simpledialog.askstring("Edit Message", "Edit your message:", initialvalue=original_message)

    def action():
        if new_message:
            content, sha = get_existing_content()
            lines = content.splitlines()
            updated_lines = [
                f"{original_sender}: {new_message.strip()}{star_status}" if line == line_text else line
                for line in lines
            ]
            new_content = "\n".join(updated_lines)
            update_github_file(new_content, sha)

    if new_message:
        threaded_action(action, display_chat_history)

def delete_message_at_line(line_text):
    def action():
        content, sha = get_existing_content()
        lines = content.splitlines()
        if line_text in lines:
            lines.remove(line_text)
            new_content = "\n".join(lines)
            update_github_file(new_content, sha)

    threaded_action(action, display_chat_history)

def delete_chat_history():
    content, sha = get_existing_content()
    lines = content.splitlines()
    
    # Preserve file uploads and starred messages
    preserved_lines = [line for line in lines if "uploaded:" in line or line.endswith(STAR_MARKER)]
    
    new_content = "\n".join(preserved_lines)
    
    if messagebox.askyesno("Delete Chat", "Are you sure you want to delete the chat history?"):
        if update_github_file(new_content, sha):
            display_chat_history()  # Refresh the chat window
            print("Chat history deleted.")
        else:
            messagebox.showerror("Error", "Failed to delete chat history.")

def fetch_chat_history():
    content, _ = get_existing_content()
    return content

def send_message():
    def threaded_send():
        disable_input("Sending...")
        message = message_entry.get()
        if message:
            if store_message(message, USER_NAME):
                root.after(0, display_chat_history)
                root.after(0, lambda: message_entry.delete(0, tk.END))
            else:
                root.after(0, lambda: messagebox.showerror("Error", "Failed to store message."))
        else:
            root.after(0, lambda: messagebox.showwarning("Warning", "Message cannot be empty."))
        enable_input()

    thread = threading.Thread(target=threaded_send, daemon=True)
    thread.start()

def disable_input(status_message):
    message_entry.config(state="disabled")
    send_button.config(state="disabled")
    upload_button.config(state="disabled")
    message_entry.delete(0, tk.END)
    message_entry.insert(0, status_message)

def enable_input():
    message_entry.config(state="normal")
    send_button.config(state="normal")
    upload_button.config(state="normal")
    message_entry.delete(0, tk.END)

def display_chat_history():
    for widget in chat_history_frame.winfo_children():
        widget.destroy()

    chat_history_content = fetch_chat_history().splitlines()
    for line in chat_history_content:
        display_text = line.replace(STAR_MARKER, "")
        alignment = "e" if line.startswith(f"{USER_NAME}:") else "w"
        is_file = "uploaded: " in line

        button = tk.Button(
            chat_history_frame,
            text=display_text,
            anchor=alignment,
            relief="flat",
            font=("Helvetica", 10, "bold") if line.endswith(STAR_MARKER) else ("Helvetica", 10),
            fg="blue" if is_file else "black",
        )
        button.bind("<Button-1>", lambda e, l=line, f=is_file: show_context_menu_for_button(e, l, f))
        button.pack(fill="x", padx=5, pady=2)

def display_chat_history():
    # Clear previous buttons
    for widget in chat_history_frame.winfo_children():
        widget.destroy()
    
    # Display each line as a button
    chat_history_content = fetch_chat_history().splitlines()
    for line in chat_history_content:
        display_text = line.replace(STAR_MARKER, "")
        
        # Determine alignment based on sender
        alignment = "e" if line.startswith(f"{USER_NAME}:") else "w"
        
        # Determine if the line is a file upload
        is_file = "uploaded: " in line
        
        # Button to display the message
        button = tk.Button(
            chat_history_frame, 
            text=display_text, 
            anchor=alignment, 
            relief="flat",
            font=("Helvetica", 10, "bold") if line.endswith(STAR_MARKER) else ("Helvetica", 10),
            fg="blue" if is_file else "black"  # Make file uploads blue
        )
        button.bind("<Button-1>", lambda e, l=line, f=is_file: show_context_menu_for_button(e, l, f))  # Left-click
        button.pack(fill="x", padx=5, pady=2)

def display_chat_history(pre_fetched_content=None):
    # Clear previous buttons
    for widget in chat_history_frame.winfo_children():
        widget.destroy()
    
    # Use pre-fetched content if provided; otherwise, fetch from GitHub
    chat_history_content = pre_fetched_content.splitlines() if pre_fetched_content else fetch_chat_history().splitlines()

    for line in chat_history_content:
        display_text = line.replace(STAR_MARKER, "")
        alignment = "e" if line.startswith(f"{USER_NAME}:") else "w"
        is_file = "uploaded: " in line

        button = tk.Button(
            chat_history_frame,
            text=display_text,
            anchor=alignment,
            relief="flat",
            font=("Helvetica", 10, "bold") if line.endswith(STAR_MARKER) else ("Helvetica", 10),
            fg="blue" if is_file else "black",
        )
        button.bind("<Button-1>", lambda e, l=line, f=is_file: show_context_menu_for_button(e, l, f))
        button.pack(fill="x", padx=5, pady=2)

def threaded_check_for_updates():
    def fetch_and_update():
        content, _ = get_existing_content()
        if content is not None:
            root.after(0, lambda: display_chat_history(content))
    
    thread = threading.Thread(target=fetch_and_update, daemon=True)
    thread.start()
    root.after(POLL_INTERVAL, threaded_check_for_updates)

def show_context_menu_for_button(event, line_text, is_file):
    context_menu = Menu(root, tearoff=0)
    if is_file:
        context_menu.add_command(label="Delete File", command=lambda: delete_message_at_line(line_text))
        file_name = line_text.split("uploaded: ")[1].strip()
        context_menu.add_command(label="Download File", command=lambda: download_file(file_name))
    else:
        context_menu.add_command(label="Delete Message", command=lambda: delete_message_at_line(line_text))
        context_menu.add_command(label="Edit Message", command=lambda: edit_message(line_text))
        if line_text.endswith(STAR_MARKER):
            context_menu.add_command(label="Unstar Message", command=lambda: toggle_star(line_text))
        else:
            context_menu.add_command(label="Star Message", command=lambda: toggle_star(line_text))
    
    context_menu.post(event.x_root, event.y_root)

def delete_github_file(file_name):
    github_file_path = f"uploads/{file_name}"
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{github_file_path}"
    headers = {'Authorization': f'token {GITHUB_TOKEN}'}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        sha = response.json()['sha']
        data = {
            'message': 'Delete file',
            'sha': sha
        }
        response = requests.delete(url, headers=headers, data=json.dumps(data))
        if response.status_code == 200:
            print("File deleted from GitHub.")
        else:
            print("Failed to delete file from GitHub.")
    else:
        print("File not found in GitHub.")

def download_file(file_name):
    file_name = file_name.strip()
    url = f"https://github.com/{REPO_OWNER}/{REPO_NAME}/blob/main/uploads/{file_name}"
    # Open the URL in the default web browser
    import webbrowser
    webbrowser.open(url)

def check_for_updates():
    display_chat_history()
    root.after(POLL_INTERVAL, check_for_updates)  # Schedule the next check

# Setup Tkinter window
root = tk.Tk()
root.title("GitHub Chat")
root.geometry("600x400")
root.rowconfigure(0, weight=1)
root.columnconfigure(0, weight=1)

chat_history_frame = tk.Frame(root)
chat_history_frame.grid(row=0, column=0, columnspan=2, sticky="nsew")

message_frame = tk.Frame(root)
message_frame.grid(row=1, column=0, pady=10, sticky="ew")
message_frame.columnconfigure(0, weight=1)

message_entry = tk.Entry(message_frame, width=40)
message_entry.grid(row=0, column=0, padx=10, sticky="ew")

send_button = tk.Button(message_frame, text="Send", command=send_message)
send_button.grid(row=0, column=1, sticky="e")

upload_button = tk.Button(message_frame, text="+", command=upload_file, bg="blue", fg="white", width=2, height=1)
upload_button.grid(row=0, column=2, sticky="e")

delete_button = tk.Button(root, text="X", command=delete_chat_history, bg="red", fg="white", width=2, height=1)
delete_button.grid(row=1, column=2, padx=10, pady=10, sticky="e")

root.after(POLL_INTERVAL, display_chat_history)
root.mainloop()

